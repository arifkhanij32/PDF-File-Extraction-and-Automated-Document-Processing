[
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "UploadedFile",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "TemplateKey",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "UploadedFile",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "extensions",
        "description": "extensions",
        "isExtraImport": true,
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "extensions",
        "description": "extensions",
        "isExtraImport": true,
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "extensions",
        "description": "extensions",
        "isExtraImport": true,
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "extensions",
        "description": "extensions",
        "isExtraImport": true,
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "extensions",
        "description": "extensions",
        "isExtraImport": true,
        "detail": "extensions",
        "documentation": {}
    },
    {
        "label": "parse_pdf",
        "importPath": "utils.pdf_parser",
        "description": "utils.pdf_parser",
        "isExtraImport": true,
        "detail": "utils.pdf_parser",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "importPath": "routes.auth_routes",
        "description": "routes.auth_routes",
        "isExtraImport": true,
        "detail": "routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "importPath": "routes.auth_routes",
        "description": "routes.auth_routes",
        "isExtraImport": true,
        "detail": "routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "file_bp",
        "importPath": "routes.file_routes",
        "description": "routes.file_routes",
        "isExtraImport": true,
        "detail": "routes.file_routes",
        "documentation": {}
    },
    {
        "label": "template_bp",
        "importPath": "routes.template_routes",
        "description": "routes.template_routes",
        "isExtraImport": true,
        "detail": "routes.template_routes",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "description": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('template_key',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=100), nullable=False),\n    sa.Column('description', sa.Text(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),",
        "detail": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "description": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('uploaded_file')\n    op.drop_table('user')\n    op.drop_table('template_key')\n    # ### end Alembic commands ###",
        "detail": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "description": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "peekOfCode": "revision = '09e58e4898f9'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('template_key',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=100), nullable=False),\n    sa.Column('description', sa.Text(), nullable=True),",
        "detail": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "description": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('template_key',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=100), nullable=False),\n    sa.Column('description', sa.Text(), nullable=True),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "description": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('template_key',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=100), nullable=False),\n    sa.Column('description', sa.Text(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "description": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('template_key',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=100), nullable=False),\n    sa.Column('description', sa.Text(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('user',",
        "detail": "backend.migrations.versions.09e58e4898f9_create_a_new_migration_script",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_engine_url",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\n            '%', '%%')\n    except AttributeError:\n        return str(get_engine().url).replace('%', '%%')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "target_db = current_app.extensions['migrate'].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "backend.routes.auth_routes",
        "description": "backend.routes.auth_routes",
        "peekOfCode": "def signup():\n    data = request.json\n    if User.query.filter_by(username=data[\"username\"]).first():\n        return jsonify({\"message\": \"Username already exists\"}), 400\n    hashed_password = generate_password_hash(data[\"password\"])\n    new_user = User(\n        username=data[\"username\"],\n        password=hashed_password,\n        role=data[\"role\"]  # Role must be passed manually\n    )",
        "detail": "backend.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "backend.routes.auth_routes",
        "description": "backend.routes.auth_routes",
        "peekOfCode": "def login():\n    data = request.json\n    user = User.query.filter_by(username=data[\"username\"]).first()\n    if user and check_password_hash(user.password, data[\"password\"]):\n        access_token = create_access_token(identity={\"id\": user.id, \"role\": user.role})\n        return jsonify({\"access_token\": access_token, \"role\": user.role}), 200\n    return jsonify({\"message\": \"Invalid credentials\"}), 401",
        "detail": "backend.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "kind": 5,
        "importPath": "backend.routes.auth_routes",
        "description": "backend.routes.auth_routes",
        "peekOfCode": "auth_bp = Blueprint(\"auth\", __name__)\n@auth_bp.route(\"/signup\", methods=[\"POST\"])\ndef signup():\n    data = request.json\n    if User.query.filter_by(username=data[\"username\"]).first():\n        return jsonify({\"message\": \"Username already exists\"}), 400\n    hashed_password = generate_password_hash(data[\"password\"])\n    new_user = User(\n        username=data[\"username\"],\n        password=hashed_password,",
        "detail": "backend.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "kind": 2,
        "importPath": "backend.routes.file_routes",
        "description": "backend.routes.file_routes",
        "peekOfCode": "def upload_file():\n    user_id = get_jwt_identity()\n    print(\"User ID:\", user_id)  # Debug print\n    print(\"Headers:\", request.headers)  # Check headers\n    pdf_file = request.files.get(\"file\")\n    if not pdf_file:\n        return jsonify({\"message\": \"No file uploaded\"}), 400\n    extracted_data = parse_pdf(pdf_file)\n    new_file = UploadedFile(\n        filename=pdf_file.filename,",
        "detail": "backend.routes.file_routes",
        "documentation": {}
    },
    {
        "label": "file_bp",
        "kind": 5,
        "importPath": "backend.routes.file_routes",
        "description": "backend.routes.file_routes",
        "peekOfCode": "file_bp = Blueprint(\"files\", __name__)\n@file_bp.route(\"/upload\", methods=[\"POST\"])\n@jwt_required()\ndef upload_file():\n    user_id = get_jwt_identity()\n    print(\"User ID:\", user_id)  # Debug print\n    print(\"Headers:\", request.headers)  # Check headers\n    pdf_file = request.files.get(\"file\")\n    if not pdf_file:\n        return jsonify({\"message\": \"No file uploaded\"}), 400",
        "detail": "backend.routes.file_routes",
        "documentation": {}
    },
    {
        "label": "get_or_create_templates",
        "kind": 2,
        "importPath": "backend.routes.template_routes",
        "description": "backend.routes.template_routes",
        "peekOfCode": "def get_or_create_templates():\n    if request.method == \"OPTIONS\":\n        return jsonify({\"message\": \"CORS preflight successful\"}), 200\n    if request.method == \"GET\":\n        # Fetch all template keys\n        templates = TemplateKey.query.all()\n        templates_list = [{\"id\": t.id, \"name\": t.name, \"description\": t.description} for t in templates]\n        return jsonify({\"templates\": templates_list}), 200\n    if request.method == \"POST\":\n        try:",
        "detail": "backend.routes.template_routes",
        "documentation": {}
    },
    {
        "label": "extract_relevant_section",
        "kind": 2,
        "importPath": "backend.routes.template_routes",
        "description": "backend.routes.template_routes",
        "peekOfCode": "def extract_relevant_section(text, keyword):\n    \"\"\"\n    Extract the section of text starting with the keyword until the next section or end of the text.\n    \"\"\"\n    try:\n        # Match text starting with the keyword until the next occurrence of \"Name:\" or end of text\n        pattern = rf\"{keyword}.*?(?=\\nName:|\\Z)\"\n        match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)\n        return match.group(0).strip() if match else None\n    except Exception as e:",
        "detail": "backend.routes.template_routes",
        "documentation": {}
    },
    {
        "label": "update_template",
        "kind": 2,
        "importPath": "backend.routes.template_routes",
        "description": "backend.routes.template_routes",
        "peekOfCode": "def update_template(id):\n    try:\n        template = TemplateKey.query.get(id)\n        if not template:\n            return jsonify({\"message\": \"Template not found\"}), 404\n        data = request.get_json()\n        template.name = data.get(\"name\", template.name)\n        template.description = data.get(\"description\", template.description)\n        db.session.commit()\n        return jsonify({\"message\": \"Template key updated successfully\"}), 200",
        "detail": "backend.routes.template_routes",
        "documentation": {}
    },
    {
        "label": "delete_template",
        "kind": 2,
        "importPath": "backend.routes.template_routes",
        "description": "backend.routes.template_routes",
        "peekOfCode": "def delete_template(id):\n    try:\n        template = TemplateKey.query.get(id)\n        if not template:\n            return jsonify({\"message\": \"Template not found\"}), 404\n        db.session.delete(template)\n        db.session.commit()\n        return jsonify({\"message\": \"Template key deleted successfully\"}), 200\n    except Exception as e:\n        return jsonify({\"message\": \"Failed to delete key\", \"error\": str(e)}), 500",
        "detail": "backend.routes.template_routes",
        "documentation": {}
    },
    {
        "label": "template_bp",
        "kind": 5,
        "importPath": "backend.routes.template_routes",
        "description": "backend.routes.template_routes",
        "peekOfCode": "template_bp = Blueprint(\"templates\", __name__, url_prefix=\"/template-keys\")\n@template_bp.route(\"/\", methods=[\"GET\", \"POST\"], strict_slashes=False)\ndef get_or_create_templates():\n    if request.method == \"OPTIONS\":\n        return jsonify({\"message\": \"CORS preflight successful\"}), 200\n    if request.method == \"GET\":\n        # Fetch all template keys\n        templates = TemplateKey.query.all()\n        templates_list = [{\"id\": t.id, \"name\": t.name, \"description\": t.description} for t in templates]\n        return jsonify({\"templates\": templates_list}), 200",
        "detail": "backend.routes.template_routes",
        "documentation": {}
    },
    {
        "label": "protected_route",
        "kind": 2,
        "importPath": "backend.utils.jwt_handler",
        "description": "backend.utils.jwt_handler",
        "peekOfCode": "def protected_route(func):\n    @jwt_required()\n    def wrapper(*args, **kwargs):\n        user = get_jwt_identity()\n        return func(user, *args, **kwargs)\n    return wrapper",
        "detail": "backend.utils.jwt_handler",
        "documentation": {}
    },
    {
        "label": "parse_pdf",
        "kind": 2,
        "importPath": "backend.utils.pdf_parser",
        "description": "backend.utils.pdf_parser",
        "peekOfCode": "def parse_pdf(file):\n    extracted_text = \"\"\n    pdf_reader = PdfReader(file.stream)\n    for page in pdf_reader.pages:\n        extracted_text += page.extract_text() or \"\"  # Safely append extracted text\n    return {\"extracted_text\": extracted_text}",
        "detail": "backend.utils.pdf_parser",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def index():\n    return {\"message\": \"Welcome to the API!\"}\nif __name__ == \"__main__\":\n    with app.app_context():\n        db.create_all()\n    app.run(debug=True)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object(Config)\nCORS(app, supports_credentials=True, resources={\n    r\"/*\": {\"origins\": \"http://localhost:3000\", \"allow_headers\": [\"Authorization\", \"Content-Type\"]}\n})\n# CORS(app, supports_credentials=True, resources={r\"/*\": {\"origins\": \"http://localhost:3000\"}})\n# Initialize extensions\n# Initialize extensions\ndb.init_app(app)\njwt.init_app(app)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "migrate = Migrate(app, db)\n# Register Blueprints\napp.register_blueprint(auth_bp, url_prefix=\"/auth\")\napp.register_blueprint(file_bp, url_prefix=\"/files\")  # Corrected prefix\napp.register_blueprint(template_bp, url_prefix=\"/template-keys\")\n@app.route(\"/\")\ndef index():\n    return {\"message\": \"Welcome to the API!\"}\nif __name__ == \"__main__\":\n    with app.app_context():",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class Config:\n    # Secret key for JWT\n    SECRET_KEY = os.getenv(\"SECRET_KEY\", \"your_secret_key_here\")\n    # Database configuration (PostgreSQL)\n    DB_NAME = os.getenv(\"DB_NAME\", \"pdf_extraction_db\")\n    DB_USER = os.getenv(\"DB_USER\", \"postgres\")\n    DB_PASSWORD = os.getenv(\"DB_PASSWORD\", \"postgres\")\n    DB_HOST = os.getenv(\"DB_HOST\", \"localhost\")\n    DB_PORT = os.getenv(\"DB_PORT\", \"5432\")\n    SQLALCHEMY_DATABASE_URI = (",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "backend.extensions",
        "description": "backend.extensions",
        "peekOfCode": "db = SQLAlchemy()\njwt = JWTManager()",
        "detail": "backend.extensions",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": "backend.extensions",
        "description": "backend.extensions",
        "peekOfCode": "jwt = JWTManager()",
        "detail": "backend.extensions",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(50), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\n    role = db.Column(db.String(20), nullable=False)  # Remove default\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\nclass TemplateKey(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text, nullable=True)",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "TemplateKey",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class TemplateKey(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text, nullable=True)\nclass UploadedFile(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    filename = db.Column(db.String(255), nullable=False)\n    extracted_text = db.Column(db.Text, nullable=False)\n    uploaded_by = db.Column(db.Integer, db.ForeignKey(\"user.id\"), nullable=False)\n    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "UploadedFile",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class UploadedFile(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    filename = db.Column(db.String(255), nullable=False)\n    extracted_text = db.Column(db.Text, nullable=False)\n    uploaded_by = db.Column(db.Integer, db.ForeignKey(\"user.id\"), nullable=False)\n    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    }
]